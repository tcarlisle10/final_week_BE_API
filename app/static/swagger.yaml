swagger: '2.0'
info:
  title: "Mechanic Service API"
  description: "API to manage a Mechanic Service System"
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /mechanics/login:
    post:
      tags:
        - Mechanics
      summary: "Endpoint to login a mechanic, (generates token)"
      description: "Validates mechanic credentials, generates and returns a mechanic-specific token"
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Successful Login"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              token: "kjsbvpiuahsenASDKLJASDKBASKDHI..."
              message: "successfully logged in"
              status: "success"

  /mechanics:
    post:
      tags:
        - Mechanics
      summary: "Endpoint to create/register a new mechanic."
      description: "Endpoint to create a new mechanic in our system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Mechanic."
          required: true
          schema:
            $ref: "#/definitions/CreateMechanicPayload"
      responses:
        201:
          description: "Successful Mechanic Creation"
          schema:
            $ref: "#/definitions/CreateMechanicResponse"
          examples:
            application/json:
              id: 1
              name: John Doe
              phone: 123-456-7890
              email: johnd@email.com
              password: password123
              role: admin

    put:
      tags:
        - Mechanics
      summary: "Endpoint to update mechanic information."
      description: "Endpoint to update a mechanic, requires a token. Leave fields you do not wish to update blank."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a mechanic."
          required: true
          schema:
            $ref: "#/definitions/UpdateMechanicPayload"
      responses:
        200:
          description: "Successfully Updated Mechanic"
          schema:
            $ref: "#/definitions/UpdateMechanicResponse"
          examples:
            application/json:
              id: 1
              name: John Diddly
              phone: 123-456-7890
              email: johnd@email.com
              password: password123
              role: admin

  /customers:
    post:
      tags:
        - Customers
      summary: "Endpoint to create/register a new customer."
      description: "Endpoint to create a new customer in our system, emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Customer."
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        201:
          description: "Successful Customer Creation"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: Jane Doe
              phone: 987-654-3210
              email: janed@email.com
              password: password123

    put:
      tags:
        - Customers
      summary: "Endpoint to update customer information."
      description: "Endpoint to update a customer, requires a token. Leave fields you do not wish to update blank."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a customer."
          required: true
          schema:
            $ref: "#/definitions/UpdateCustomerPayload"
      responses:
        200:
          description: "Successfully Updated Customer"
          schema:
            $ref: "#/definitions/UpdateCustomerResponse"
          examples:
            application/json:
              id: 1
              name: Jane Diddly
              phone: 987-654-3210
              email: janed@email.com
              password: password123

  /serviceTickets:
    post:
      tags:
        - ServiceTickets
      summary: "Endpoint to create a new service ticket."
      description: "Endpoint to create a new service ticket in our system."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Service Ticket."
          required: true
          schema:
            $ref: "#/definitions/CreateServiceTicketPayload"
      responses:
        201:
          description: "Successful Service Ticket Creation"
          schema:
            $ref: "#/definitions/CreateServiceTicketResponse"
          examples:
            application/json:
              id: 1
              customerId: 1
              mechanicId: 1
              description: "Oil change"
              status: "open"

    put:
      tags:
        - ServiceTickets
      summary: "Endpoint to update service ticket information."
      description: "Endpoint to update a service ticket, requires a token. Leave fields you do not wish to update blank."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a service ticket."
          required: true
          schema:
            $ref: "#/definitions/UpdateServiceTicketPayload"
      responses:
        200:
          description: "Successfully Updated Service Ticket"
          schema:
            $ref: "#/definitions/UpdateServiceTicketResponse"
          examples:
            application/json:
              id: 1
              customerId: 1
              mechanicId: 1
              description: "Oil change and tire rotation"
              status: "in progress"

definitions:
  LoginPayload:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    required:
      - email
      - password

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

  CreateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      role:
        type: "string"
        description: "admin or general"
    required:
      - name
      - email
      - phone
      - password
      - role

  CreateMechanicResponse:
    type: "object"
    properties:
      id:
        type: "int"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      role:
        type: "string"

  UpdateMechanicPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
    required:
      - name
      - email
      - phone
      - password

  UpdateMechanicResponse:
    type: "object"
    properties:
      id:
        type: "int"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
      role:
        type: "string"

  CreateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
    required:
      - name
      - email
      - phone
      - password

  CreateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "int"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"

  UpdateCustomerPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"
    required:
      - name
      - email
      - phone
      - password

  UpdateCustomerResponse:
    type: "object"
    properties:
      id:
        type: "int"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      password:
        type: "string"

  CreateServiceTicketPayload:
    type: "object"
    properties:
      customerId:
        type: "int"
      mechanicId:
        type: "int"
      description:
        type: "string"
      status:
        type: "string"
    required:
      - customerId
      - mechanicId
      - description
      - status

  CreateServiceTicketResponse:
    type: "object"
    properties:
      id:
        type: "int"
      customerId:
        type: "int"
      mechanicId:
        type: "int"
      description:
        type: "string"
      status:
        type: "string"

  UpdateServiceTicketPayload:
    type: "object"
    properties:
      customerId:
        type: "int"
      mechanicId:
        type: "int"
      description:
        type: "string"
      status:
        type: "string"
    required:
      - customerId
      - mechanicId
      - description
      - status

  UpdateServiceTicketResponse:
    type: "object"
    properties:
      id:
        type: "int"
      customerId:
        type: "int"
      mechanicId:
        type: "int"
      description:
        type: "string"
      status:
        type: "string"